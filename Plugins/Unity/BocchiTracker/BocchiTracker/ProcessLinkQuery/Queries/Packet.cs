// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BocchiTracker.ProcessLinkQuery.Queries
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Packet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static Packet GetRootAsPacket(ByteBuffer _bb) { return GetRootAsPacket(_bb, new Packet()); }
  public static Packet GetRootAsPacket(ByteBuffer _bb, Packet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyPacket(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, PacketVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Packet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BocchiTracker.ProcessLinkQuery.Queries.QueryID QueryIdType { get { int o = __p.__offset(4); return o != 0 ? (BocchiTracker.ProcessLinkQuery.Queries.QueryID)__p.bb.Get(o + __p.bb_pos) : BocchiTracker.ProcessLinkQuery.Queries.QueryID.NONE; } }
  public TTable? QueryId<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public BocchiTracker.ProcessLinkQuery.Queries.AppBasicInfo QueryIdAsAppBasicInfo() { return QueryId<BocchiTracker.ProcessLinkQuery.Queries.AppBasicInfo>().Value; }
  public BocchiTracker.ProcessLinkQuery.Queries.PlayerPosition QueryIdAsPlayerPosition() { return QueryId<BocchiTracker.ProcessLinkQuery.Queries.PlayerPosition>().Value; }
  public BocchiTracker.ProcessLinkQuery.Queries.ScreenshotData QueryIdAsScreenshotData() { return QueryId<BocchiTracker.ProcessLinkQuery.Queries.ScreenshotData>().Value; }
  public BocchiTracker.ProcessLinkQuery.Queries.LogData QueryIdAsLogData() { return QueryId<BocchiTracker.ProcessLinkQuery.Queries.LogData>().Value; }
  public BocchiTracker.ProcessLinkQuery.Queries.ScreenshotRequest QueryIdAsScreenshotRequest() { return QueryId<BocchiTracker.ProcessLinkQuery.Queries.ScreenshotRequest>().Value; }
  public BocchiTracker.ProcessLinkQuery.Queries.JumpRequest QueryIdAsJumpRequest() { return QueryId<BocchiTracker.ProcessLinkQuery.Queries.JumpRequest>().Value; }
  public BocchiTracker.ProcessLinkQuery.Queries.IssueesRequest QueryIdAsIssueesRequest() { return QueryId<BocchiTracker.ProcessLinkQuery.Queries.IssueesRequest>().Value; }

  public static Offset<BocchiTracker.ProcessLinkQuery.Queries.Packet> CreatePacket(FlatBufferBuilder builder,
      BocchiTracker.ProcessLinkQuery.Queries.QueryID query_id_type = BocchiTracker.ProcessLinkQuery.Queries.QueryID.NONE,
      int query_idOffset = 0) {
    builder.StartTable(2);
    Packet.AddQueryId(builder, query_idOffset);
    Packet.AddQueryIdType(builder, query_id_type);
    return Packet.EndPacket(builder);
  }

  public static void StartPacket(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddQueryIdType(FlatBufferBuilder builder, BocchiTracker.ProcessLinkQuery.Queries.QueryID queryIdType) { builder.AddByte(0, (byte)queryIdType, 0); }
  public static void AddQueryId(FlatBufferBuilder builder, int queryIdOffset) { builder.AddOffset(1, queryIdOffset, 0); }
  public static Offset<BocchiTracker.ProcessLinkQuery.Queries.Packet> EndPacket(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BocchiTracker.ProcessLinkQuery.Queries.Packet>(o);
  }
  public static void FinishPacketBuffer(FlatBufferBuilder builder, Offset<BocchiTracker.ProcessLinkQuery.Queries.Packet> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPacketBuffer(FlatBufferBuilder builder, Offset<BocchiTracker.ProcessLinkQuery.Queries.Packet> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class PacketVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*QueryIdType*/, 1 /*BocchiTracker.ProcessLinkQuery.Queries.QueryID*/, 1, false)
//      && verifier.VerifyUnion(tablePos, 4, 6 /*QueryId*/, BocchiTracker.ProcessLinkQuery.Queries.QueryIDVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
