// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_QUERY_BOCCHITRACKER_PROCESSLINKQUERY_QUERIES_H_
#define FLATBUFFERS_GENERATED_QUERY_BOCCHITRACKER_PROCESSLINKQUERY_QUERIES_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace BocchiTracker {
namespace ProcessLinkQuery {
namespace Queries {

struct ScreenshotData;
struct ScreenshotDataBuilder;

struct PlayerPosition;
struct PlayerPositionBuilder;

struct AppBasicInfo;
struct AppBasicInfoBuilder;

struct RequestQuery;
struct RequestQueryBuilder;

struct Packet;
struct PacketBuilder;

enum QueryID : uint8_t {
  QueryID_NONE = 0,
  QueryID_AppBasicInfo = 1,
  QueryID_RequestQuery = 2,
  QueryID_PlayerPosition = 3,
  QueryID_ScreenshotData = 4,
  QueryID_MIN = QueryID_NONE,
  QueryID_MAX = QueryID_ScreenshotData
};

inline const QueryID (&EnumValuesQueryID())[5] {
  static const QueryID values[] = {
    QueryID_NONE,
    QueryID_AppBasicInfo,
    QueryID_RequestQuery,
    QueryID_PlayerPosition,
    QueryID_ScreenshotData
  };
  return values;
}

inline const char * const *EnumNamesQueryID() {
  static const char * const names[6] = {
    "NONE",
    "AppBasicInfo",
    "RequestQuery",
    "PlayerPosition",
    "ScreenshotData",
    nullptr
  };
  return names;
}

inline const char *EnumNameQueryID(QueryID e) {
  if (::flatbuffers::IsOutRange(e, QueryID_NONE, QueryID_ScreenshotData)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesQueryID()[index];
}

template<typename T> struct QueryIDTraits {
  static const QueryID enum_value = QueryID_NONE;
};

template<> struct QueryIDTraits<BocchiTracker::ProcessLinkQuery::Queries::AppBasicInfo> {
  static const QueryID enum_value = QueryID_AppBasicInfo;
};

template<> struct QueryIDTraits<BocchiTracker::ProcessLinkQuery::Queries::RequestQuery> {
  static const QueryID enum_value = QueryID_RequestQuery;
};

template<> struct QueryIDTraits<BocchiTracker::ProcessLinkQuery::Queries::PlayerPosition> {
  static const QueryID enum_value = QueryID_PlayerPosition;
};

template<> struct QueryIDTraits<BocchiTracker::ProcessLinkQuery::Queries::ScreenshotData> {
  static const QueryID enum_value = QueryID_ScreenshotData;
};

bool VerifyQueryID(::flatbuffers::Verifier &verifier, const void *obj, QueryID type);
bool VerifyQueryIDVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct ScreenshotData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ScreenshotDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_DATA = 8
  };
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT, 4) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct ScreenshotDataBuilder {
  typedef ScreenshotData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(ScreenshotData::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(ScreenshotData::VT_HEIGHT, height, 0);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(ScreenshotData::VT_DATA, data);
  }
  explicit ScreenshotDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ScreenshotData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ScreenshotData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ScreenshotData> CreateScreenshotData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  ScreenshotDataBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ScreenshotData> CreateScreenshotDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return BocchiTracker::ProcessLinkQuery::Queries::CreateScreenshotData(
      _fbb,
      width,
      height,
      data__);
}

struct PlayerPosition FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerPositionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8,
    VT_STAGE = 10
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  const ::flatbuffers::String *stage() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_Z, 4) &&
           VerifyOffset(verifier, VT_STAGE) &&
           verifier.VerifyString(stage()) &&
           verifier.EndTable();
  }
};

struct PlayerPositionBuilder {
  typedef PlayerPosition Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(PlayerPosition::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(PlayerPosition::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(PlayerPosition::VT_Z, z, 0.0f);
  }
  void add_stage(::flatbuffers::Offset<::flatbuffers::String> stage) {
    fbb_.AddOffset(PlayerPosition::VT_STAGE, stage);
  }
  explicit PlayerPositionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerPosition> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerPosition>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerPosition> CreatePlayerPosition(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> stage = 0) {
  PlayerPositionBuilder builder_(_fbb);
  builder_.add_stage(stage);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PlayerPosition> CreatePlayerPositionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f,
    const char *stage = nullptr) {
  auto stage__ = stage ? _fbb.CreateString(stage) : 0;
  return BocchiTracker::ProcessLinkQuery::Queries::CreatePlayerPosition(
      _fbb,
      x,
      y,
      z,
      stage__);
}

struct AppBasicInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AppBasicInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PID = 4,
    VT_APP_NAME = 6,
    VT_ARGS = 8,
    VT_PLATFORM = 10
  };
  int32_t pid() const {
    return GetField<int32_t>(VT_PID, 0);
  }
  const ::flatbuffers::String *app_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APP_NAME);
  }
  const ::flatbuffers::String *args() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARGS);
  }
  const ::flatbuffers::String *platform() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLATFORM);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PID, 4) &&
           VerifyOffset(verifier, VT_APP_NAME) &&
           verifier.VerifyString(app_name()) &&
           VerifyOffset(verifier, VT_ARGS) &&
           verifier.VerifyString(args()) &&
           VerifyOffset(verifier, VT_PLATFORM) &&
           verifier.VerifyString(platform()) &&
           verifier.EndTable();
  }
};

struct AppBasicInfoBuilder {
  typedef AppBasicInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pid(int32_t pid) {
    fbb_.AddElement<int32_t>(AppBasicInfo::VT_PID, pid, 0);
  }
  void add_app_name(::flatbuffers::Offset<::flatbuffers::String> app_name) {
    fbb_.AddOffset(AppBasicInfo::VT_APP_NAME, app_name);
  }
  void add_args(::flatbuffers::Offset<::flatbuffers::String> args) {
    fbb_.AddOffset(AppBasicInfo::VT_ARGS, args);
  }
  void add_platform(::flatbuffers::Offset<::flatbuffers::String> platform) {
    fbb_.AddOffset(AppBasicInfo::VT_PLATFORM, platform);
  }
  explicit AppBasicInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AppBasicInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AppBasicInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AppBasicInfo> CreateAppBasicInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> app_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> args = 0,
    ::flatbuffers::Offset<::flatbuffers::String> platform = 0) {
  AppBasicInfoBuilder builder_(_fbb);
  builder_.add_platform(platform);
  builder_.add_args(args);
  builder_.add_app_name(app_name);
  builder_.add_pid(pid);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AppBasicInfo> CreateAppBasicInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pid = 0,
    const char *app_name = nullptr,
    const char *args = nullptr,
    const char *platform = nullptr) {
  auto app_name__ = app_name ? _fbb.CreateString(app_name) : 0;
  auto args__ = args ? _fbb.CreateString(args) : 0;
  auto platform__ = platform ? _fbb.CreateString(platform) : 0;
  return BocchiTracker::ProcessLinkQuery::Queries::CreateAppBasicInfo(
      _fbb,
      pid,
      app_name__,
      args__,
      platform__);
}

struct RequestQuery FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestQueryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_QUERY_ID = 4
  };
  int32_t query_id() const {
    return GetField<int32_t>(VT_QUERY_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_QUERY_ID, 4) &&
           verifier.EndTable();
  }
};

struct RequestQueryBuilder {
  typedef RequestQuery Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_query_id(int32_t query_id) {
    fbb_.AddElement<int32_t>(RequestQuery::VT_QUERY_ID, query_id, 0);
  }
  explicit RequestQueryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RequestQuery> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RequestQuery>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RequestQuery> CreateRequestQuery(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t query_id = 0) {
  RequestQueryBuilder builder_(_fbb);
  builder_.add_query_id(query_id);
  return builder_.Finish();
}

struct Packet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_QUERY_ID_TYPE = 4,
    VT_QUERY_ID = 6
  };
  BocchiTracker::ProcessLinkQuery::Queries::QueryID query_id_type() const {
    return static_cast<BocchiTracker::ProcessLinkQuery::Queries::QueryID>(GetField<uint8_t>(VT_QUERY_ID_TYPE, 0));
  }
  const void *query_id() const {
    return GetPointer<const void *>(VT_QUERY_ID);
  }
  template<typename T> const T *query_id_as() const;
  const BocchiTracker::ProcessLinkQuery::Queries::AppBasicInfo *query_id_as_AppBasicInfo() const {
    return query_id_type() == BocchiTracker::ProcessLinkQuery::Queries::QueryID_AppBasicInfo ? static_cast<const BocchiTracker::ProcessLinkQuery::Queries::AppBasicInfo *>(query_id()) : nullptr;
  }
  const BocchiTracker::ProcessLinkQuery::Queries::RequestQuery *query_id_as_RequestQuery() const {
    return query_id_type() == BocchiTracker::ProcessLinkQuery::Queries::QueryID_RequestQuery ? static_cast<const BocchiTracker::ProcessLinkQuery::Queries::RequestQuery *>(query_id()) : nullptr;
  }
  const BocchiTracker::ProcessLinkQuery::Queries::PlayerPosition *query_id_as_PlayerPosition() const {
    return query_id_type() == BocchiTracker::ProcessLinkQuery::Queries::QueryID_PlayerPosition ? static_cast<const BocchiTracker::ProcessLinkQuery::Queries::PlayerPosition *>(query_id()) : nullptr;
  }
  const BocchiTracker::ProcessLinkQuery::Queries::ScreenshotData *query_id_as_ScreenshotData() const {
    return query_id_type() == BocchiTracker::ProcessLinkQuery::Queries::QueryID_ScreenshotData ? static_cast<const BocchiTracker::ProcessLinkQuery::Queries::ScreenshotData *>(query_id()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_QUERY_ID_TYPE, 1) &&
           VerifyOffset(verifier, VT_QUERY_ID) &&
           VerifyQueryID(verifier, query_id(), query_id_type()) &&
           verifier.EndTable();
  }
};

template<> inline const BocchiTracker::ProcessLinkQuery::Queries::AppBasicInfo *Packet::query_id_as<BocchiTracker::ProcessLinkQuery::Queries::AppBasicInfo>() const {
  return query_id_as_AppBasicInfo();
}

template<> inline const BocchiTracker::ProcessLinkQuery::Queries::RequestQuery *Packet::query_id_as<BocchiTracker::ProcessLinkQuery::Queries::RequestQuery>() const {
  return query_id_as_RequestQuery();
}

template<> inline const BocchiTracker::ProcessLinkQuery::Queries::PlayerPosition *Packet::query_id_as<BocchiTracker::ProcessLinkQuery::Queries::PlayerPosition>() const {
  return query_id_as_PlayerPosition();
}

template<> inline const BocchiTracker::ProcessLinkQuery::Queries::ScreenshotData *Packet::query_id_as<BocchiTracker::ProcessLinkQuery::Queries::ScreenshotData>() const {
  return query_id_as_ScreenshotData();
}

struct PacketBuilder {
  typedef Packet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_query_id_type(BocchiTracker::ProcessLinkQuery::Queries::QueryID query_id_type) {
    fbb_.AddElement<uint8_t>(Packet::VT_QUERY_ID_TYPE, static_cast<uint8_t>(query_id_type), 0);
  }
  void add_query_id(::flatbuffers::Offset<void> query_id) {
    fbb_.AddOffset(Packet::VT_QUERY_ID, query_id);
  }
  explicit PacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Packet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Packet> CreatePacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    BocchiTracker::ProcessLinkQuery::Queries::QueryID query_id_type = BocchiTracker::ProcessLinkQuery::Queries::QueryID_NONE,
    ::flatbuffers::Offset<void> query_id = 0) {
  PacketBuilder builder_(_fbb);
  builder_.add_query_id(query_id);
  builder_.add_query_id_type(query_id_type);
  return builder_.Finish();
}

inline bool VerifyQueryID(::flatbuffers::Verifier &verifier, const void *obj, QueryID type) {
  switch (type) {
    case QueryID_NONE: {
      return true;
    }
    case QueryID_AppBasicInfo: {
      auto ptr = reinterpret_cast<const BocchiTracker::ProcessLinkQuery::Queries::AppBasicInfo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case QueryID_RequestQuery: {
      auto ptr = reinterpret_cast<const BocchiTracker::ProcessLinkQuery::Queries::RequestQuery *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case QueryID_PlayerPosition: {
      auto ptr = reinterpret_cast<const BocchiTracker::ProcessLinkQuery::Queries::PlayerPosition *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case QueryID_ScreenshotData: {
      auto ptr = reinterpret_cast<const BocchiTracker::ProcessLinkQuery::Queries::ScreenshotData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyQueryIDVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyQueryID(
        verifier,  values->Get(i), types->GetEnum<QueryID>(i))) {
      return false;
    }
  }
  return true;
}

inline const BocchiTracker::ProcessLinkQuery::Queries::Packet *GetPacket(const void *buf) {
  return ::flatbuffers::GetRoot<BocchiTracker::ProcessLinkQuery::Queries::Packet>(buf);
}

inline const BocchiTracker::ProcessLinkQuery::Queries::Packet *GetSizePrefixedPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<BocchiTracker::ProcessLinkQuery::Queries::Packet>(buf);
}

inline bool VerifyPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BocchiTracker::ProcessLinkQuery::Queries::Packet>(nullptr);
}

inline bool VerifySizePrefixedPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<BocchiTracker::ProcessLinkQuery::Queries::Packet>(nullptr);
}

inline void FinishPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BocchiTracker::ProcessLinkQuery::Queries::Packet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BocchiTracker::ProcessLinkQuery::Queries::Packet> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Queries
}  // namespace ProcessLinkQuery
}  // namespace BocchiTracker

#endif  // FLATBUFFERS_GENERATED_QUERY_BOCCHITRACKER_PROCESSLINKQUERY_QUERIES_H_
