// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BocchiTracker.ProcessLinkQuery.Queries
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Issue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static Issue GetRootAsIssue(ByteBuffer _bb) { return GetRootAsIssue(_bb, new Issue()); }
  public static Issue GetRootAsIssue(ByteBuffer _bb, Issue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Issue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Summary { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSummaryBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSummaryBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSummaryArray() { return __p.__vector_as_array<byte>(6); }
  public string Assign { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAssignBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAssignBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAssignArray() { return __p.__vector_as_array<byte>(8); }
  public string Status { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetStatusBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetStatusArray() { return __p.__vector_as_array<byte>(10); }
  public string Stage { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStageBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStageBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStageArray() { return __p.__vector_as_array<byte>(12); }
  public BocchiTracker.ProcessLinkQuery.Queries.Vector3? Location { get { int o = __p.__offset(14); return o != 0 ? (BocchiTracker.ProcessLinkQuery.Queries.Vector3?)(new BocchiTracker.ProcessLinkQuery.Queries.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartIssue(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddSummary(FlatBufferBuilder builder, StringOffset summaryOffset) { builder.AddOffset(1, summaryOffset.Value, 0); }
  public static void AddAssign(FlatBufferBuilder builder, StringOffset assignOffset) { builder.AddOffset(2, assignOffset.Value, 0); }
  public static void AddStatus(FlatBufferBuilder builder, StringOffset statusOffset) { builder.AddOffset(3, statusOffset.Value, 0); }
  public static void AddStage(FlatBufferBuilder builder, StringOffset stageOffset) { builder.AddOffset(4, stageOffset.Value, 0); }
  public static void AddLocation(FlatBufferBuilder builder, Offset<BocchiTracker.ProcessLinkQuery.Queries.Vector3> locationOffset) { builder.AddStruct(5, locationOffset.Value, 0); }
  public static Offset<BocchiTracker.ProcessLinkQuery.Queries.Issue> EndIssue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BocchiTracker.ProcessLinkQuery.Queries.Issue>(o);
  }
}


static public class IssueVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*Summary*/, false)
      && verifier.VerifyString(tablePos, 8 /*Assign*/, false)
      && verifier.VerifyString(tablePos, 10 /*Status*/, false)
      && verifier.VerifyString(tablePos, 12 /*Stage*/, false)
      && verifier.VerifyField(tablePos, 14 /*Location*/, 12 /*BocchiTracker.ProcessLinkQuery.Queries.Vector3*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
